import{_ as t,c as o,a2 as d,o as a}from"./chunks/framework.DXaKt7EB.js";const s=JSON.parse('{"title":"流程分支","description":"","frontmatter":{},"headers":[],"relativePath":"docs/branch.md","filePath":"docs/branch.md","lastUpdated":1733488615000}'),c={name:"docs/branch.md"};function l(r,e,i,p,h,n){return a(),o("div",null,e[0]||(e[0]=[d('<h1 id="流程分支" tabindex="-1">流程分支 <a class="header-anchor" href="#流程分支" aria-label="Permalink to &quot;流程分支&quot;">​</a></h1><blockquote><p>包括 <code>flowable</code> 在内的其它 <code>bpm</code> 框架叫做 <code>网关</code> ，这一概念在 <code>flowlong</code> 被称 <code>分支</code> 包含待执行任务，它们在流程设计和执行中扮演着不同的角色。</p></blockquote><h2 id="并行分支" tabindex="-1">并行分支 <a class="header-anchor" href="#并行分支" aria-label="Permalink to &quot;并行分支&quot;">​</a></h2><blockquote><p>提高工作流的执行效率，可以在同一时间内执行多个任务。</p></blockquote><ul><li><p>定义与功能： 并行分支允许将流程分成多条分支，也可以把多条分支汇聚到一起。其功能是基于进入和外出顺序流的，即可以分叉<code>（fork）</code>成多个并行分支，也可以汇聚<code>（join）</code>多个并行分支。</p></li><li><p>特点： 并行分支不会解析条件，即使顺序流中定义了条件，也会被忽略。 并行分支不需要平衡进入和出去流的数量，即进入和出去的分支数量可以不同。</p></li><li><p>应用场景： 常用于并行执行多个任务，这些任务可以是相互独立的，也可以是相互依赖的。</p></li></ul><h2 id="包容分支" tabindex="-1">包容分支 <a class="header-anchor" href="#包容分支" aria-label="Permalink to &quot;包容分支&quot;">​</a></h2><blockquote><p>特别适用于需要会签（即多个参与者共同办理）的任务场景。</p></blockquote><ul><li><p>定义与功能： 包容分支可以看做是排它分支和并行分支的结合体。它允许基于条件选择多条分支执行，但如果没有任何一个分支满足条件，则可以选择默认分支。</p></li><li><p>特点： 包容分支会在所有外出顺序流上解析条件，并且会并行执行所有条件为<code>true</code>的分支。 在汇聚时，包容分支只会等待被选中执行了的进入顺序流，这是与并行分支的重要区别。</p></li><li><p>应用场景： 当工作流中的多个任务有不同的执行顺序或条件时，使用包容分支可以实现灵活的流程控制。</p></li></ul><h2 id="条件分支" tabindex="-1">条件分支 <a class="header-anchor" href="#条件分支" aria-label="Permalink to &quot;条件分支&quot;">​</a></h2><blockquote><p>也用于处理异常情况，将流程路由到特定的异常处理分支。</p></blockquote><ul><li><p>定义与功能： 排它分支用于在流程中实现决策，即根据条件选择一个分支执行。</p></li><li><p>特点： 当流程执行到排它分支时，所有分支都会进行条件判断，但只会选择一个条件为<code>true</code>的分支执行。 如果有多个分支条件都为true，排它分支会按照<code>json</code>中定义的顺序来执行，即默认走第一个符合条件的分支。</p></li><li><p>应用场景： 常用于流程中的决策点，根据条件选择不同的执行路径。</p></li></ul><h2 id="路由分支" tabindex="-1">路由分支 <a class="header-anchor" href="#路由分支" aria-label="Permalink to &quot;路由分支&quot;">​</a></h2><blockquote><p>用于解决<code>线性模型</code>不支持<code>回路流转</code>的补充分支。</p></blockquote><ul><li><p>定义与功能： 用于在流程中实现<code>环形审批</code>，根据条件选择重定向到<code>指定节点</code>执行路径。</p></li><li><p>特点： 根据<code>条件组</code>自动<code>重定向</code>到指定节点</p></li><li><p>应用场景： 常用于流程中需要<code>重新复审</code>情况，可配置条件<code>指定退回节点</code>。</p></li></ul><h2 id="总结对比" tabindex="-1">总结对比 <a class="header-anchor" href="#总结对比" aria-label="Permalink to &quot;总结对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>分支类型</th><th>定义与功能</th><th>特点</th><th>应用场景</th></tr></thead><tbody><tr><td>并行分支</td><td>将流程分成多条分支或汇聚多条分支</td><td>不解析条件，数量无需平衡</td><td>并行执行多个任务，提高执行效率</td></tr><tr><td>包容分支</td><td>结合排它分支和并行分支的功能，允许多条分支执行</td><td>解析条件，并行执行所有<code>true</code>的分支，只等待被选中的进入顺序流</td><td>灵活控制流程，适用于会签等任务场景</td></tr><tr><td>条件分支</td><td>根据条件选择一个分支执行</td><td>只选择一个<code>true</code>的分支执行，按定义顺序</td><td>流程决策点，处理异常情况</td></tr><tr><td>路由分支</td><td>根据条件选择一个分支执行</td><td>只选择一个<code>true</code>的分支执行，按定义顺序</td><td>根据条件复审，退回指定节点</td></tr></tbody></table>',16)]))}const b=t(c,[["render",l]]);export{s as __pageData,b as default};
