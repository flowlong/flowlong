import{_ as s,c as e,a2 as i,o as n}from"./chunks/framework.DXaKt7EB.js";const k=JSON.parse('{"title":"分布式集成","description":"","frontmatter":{},"headers":[],"relativePath":"docs/distributed.md","filePath":"docs/distributed.md","lastUpdated":null}'),l={name:"docs/distributed.md"};function t(p,a,r,o,h,d){return n(),e("div",null,a[0]||(a[0]=[i(`<h1 id="分布式集成" tabindex="-1">分布式集成 <a class="header-anchor" href="#分布式集成" aria-label="Permalink to &quot;分布式集成&quot;">​</a></h1><blockquote><p>本文详细讲解如何集成 <code>FlowLong</code> 分布式相关内容。</p></blockquote><h2 id="数据层" tabindex="-1">数据层 <a class="header-anchor" href="#数据层" aria-label="Permalink to &quot;数据层&quot;">​</a></h2><blockquote><p>默认采用 <a href="https://baomidou.com" target="_blank" rel="noreferrer"><code>MybatisPlus</code></a> <code>雪花ID</code> 生成器，确保在分布式数据环境下 <code>主键ID</code> 的唯一性。</p></blockquote><h2 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h2><blockquote><p>集成 <code>FlowLong</code> 框架层面保持操作的原子性。</p></blockquote><h3 id="分布式缓存" tabindex="-1">分布式缓存 <a class="header-anchor" href="#分布式缓存" aria-label="Permalink to &quot;分布式缓存&quot;">​</a></h3><blockquote><p>更多查看 <a href="/docs/modelCache.html">模型缓存</a> 说明</p></blockquote><ul><li>实现 <code>FlowCache</code> 缓存接口，确保在分布式数据环境下缓存数据一致性。缓存内容主要包括模型数据等，确保运行更加高效。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认采用 \`ConcurrentHashMap\` 实现本地缓存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FlowCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="分布式任务锁" tabindex="-1">分布式任务锁 <a class="header-anchor" href="#分布式任务锁" aria-label="Permalink to &quot;分布式任务锁&quot;">​</a></h3><blockquote><p>需要注意的是，在分布式环境下调用 <code>FlowLong</code> 相关方法，业务层面也需要加锁，防止任务并发执行。</p></blockquote><ul><li>实现 <code>JobLock</code> 任务执行锁接口，为任务执行提供分布式锁，确保任务执行一致性。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认采用 \`ReentrantLock\` 实现本地锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JobLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h3 id="分布式定时任务" tabindex="-1">分布式定时任务 <a class="header-anchor" href="#分布式定时任务" aria-label="Permalink to &quot;分布式定时任务&quot;">​</a></h3><blockquote><p>更多查看 <a href="/docs/scheduler.html">定时调度</a> 说明</p></blockquote><ul><li>继成 <code>FlowLongScheduler</code> 抽象类，实现分布式任务调度功能，该功能主要实现了延时通知触发器等功能。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认采用 \`Spring Boot\` \`SchedulingConfigurer\` 实现单机定时调度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FlowLongScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,19)]))}const u=s(l,[["render",t]]);export{k as __pageData,u as default};
