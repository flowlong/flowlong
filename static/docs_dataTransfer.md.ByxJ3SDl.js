import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.BjiR7zK0.js";const g=JSON.parse('{"title":"流程数据传输","description":"","frontmatter":{},"headers":[],"relativePath":"docs/dataTransfer.md","filePath":"docs/dataTransfer.md","lastUpdated":1715998632000}'),e={name:"docs/dataTransfer.md"},l=n(`<h1 id="流程数据传输" tabindex="-1">流程数据传输 <a class="header-anchor" href="#流程数据传输" aria-label="Permalink to &quot;流程数据传输&quot;">​</a></h1><blockquote><p>流程数据传输类 <code>FlowDataTransfer</code> 用于在流程引擎内部无方法参数形式传递执行变量，基于 <code>ThreadLocal</code> 实现参数传递。</p></blockquote><ul><li>案例：查看测试用例 <code>TestModel.testDynamicAssignee()</code> 传输动态节点处理人</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FlowDataTransfer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamicAssignee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 节点动态分配处理人</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nodeName, DynamicAssignee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assigneeUserList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assigneeList));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>可用在业务中处理跨方法同一个线程的参数传递</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FlowDataTransfer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, 变量对象);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FlowDataTransfer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">提示！</p><p>动态分配处理人，可用在发起流程的时候动态分配。 数据传输在不破坏现有现有接口及跨方法传输的情况下是非常完美有效的传参方式。</p></div>`,7),t=[l];function p(h,r,k,d,c,o){return i(),a("div",null,t)}const u=s(e,[["render",p]]);export{g as __pageData,u as default};
