import{_ as a,c as i,a2 as n,o as e}from"./chunks/framework.DXaKt7EB.js";const o=JSON.parse('{"title":"任务创建拦截器","description":"","frontmatter":{},"headers":[],"relativePath":"docs/taskCreateInterceptor.md","filePath":"docs/taskCreateInterceptor.md","lastUpdated":1717325721000}'),l={name:"docs/taskCreateInterceptor.md"};function p(t,s,h,k,r,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="任务创建拦截器" tabindex="-1">任务创建拦截器 <a class="header-anchor" href="#任务创建拦截器" aria-label="Permalink to &quot;任务创建拦截器&quot;">​</a></h1><blockquote><p>流程任务创建拦截器，该方法用于拦截流程任务创建前后加入需要处理业务逻辑。</p></blockquote><ul><li>实现流程任务创建拦截器接口 <code>TaskCreateInterceptor</code> 默认前置 <code>before</code> 拦截器不处理，需要处理子类重写该方法。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskCreateInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 拦截前置处理方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flowLongContext</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 流程引擎上下文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> execution</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       执行对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FlowLongContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flowLongContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Execution </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 默认不处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 拦截后置处理方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flowLongContext</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 流程引擎上下文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> execution</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       执行对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FlowLongContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flowLongContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Execution </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,4)]))}const g=a(l,[["render",p]]);export{o as __pageData,g as default};
